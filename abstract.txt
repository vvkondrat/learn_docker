Конспект по Docker

Команды для проверки работоспособности докера
    docker --version
    docker run hello-world



    docker ps                                       список запущенных контейнеров
    docker ps -a                                    список всех контейнеров, вне зависимости от их состояния
    docker rm <container id> / <names>              удаляет контейнер 
    docker images                                   список docker images на локальном репозитории
    docker rmi <image id>                           удаляет docker image
    docker run <image>                              создается новый контейнер
    docker run -d <image> sleep 10                  запуск docker image в бекграунде на 10 секунд
    docker run --rm <image>                         после завершения контейнера он удаляется из списка всех контейнеров
    docker start <image>                            запускается контейнер
    docker pause / unpause <container id>           поставить на паузу / возобновить контейнер
    docker stop / kill <container id> / <names>     закончить / "убить" запущенный контейнер
    docker inspect <container id>                   показывает всю информацию о контейнере
    docker stats <container id>                     показывается статистику контейнера
    docker logs <container id>                      показывает последние логи контейнера
    docker logs -f <container id>                   показывает лайф логи контейнера
    docker system prune -a --volumes                удаляет все images, containers (работает только если остановлены все контейнеры)
    

                                Переменные. Environment Variables.
    В документации в большинстве случаев прописаны используемые в контейнере переменные.
    пример: docker run -e MYSQL_ROOT_PASSWORD=pass123 mysql 
    запускает докер mysql с паролем pass123 (данная переменная является обязательной для запуска этого контейнера)
    Мы также можем создавать свои переменные, которые прописываем после аргументы -e в командной строке
    Просмотр и использование переменных происходит в режиме exec контейнера с помощью команды env 


                                Volumes. Постоянные данные. Persisting Data.
    С помощью параметрф -v мы можем создать постоянные данные, которые не исчезнут, если мы остановим или удалим контейнер
    Существует 3 способа создания и связывания данных при запуске контейнера: Host Volumes, Anonymous Volumes и Named Volumes
    Host Volumes: локально связываем директорию на сервере и директорию в контейнере (читать документацию при запуске image)
    Anonymous Volumes: создает директорию в папке docker/volumes/<HASH> и удаляется вместе с удалением контейнера
    Named Volumes: на примере nexcloud
    .....................................
    docker run -d \
	-v nextcloud:/var/www/html \
	-v apps:/var/www/html/custom_apps \
	-v config:/var/www/html/config \
	-v data:/var/www/html/data \
	-v theme:/var/www/html/themes/<YOUR_CUSTOM_THEME> \
	nextcloud
    ......................................
    
    при запуске контейнера создаем в docker/volumes 5 папок с volumes, которые сохраняются даже после остановки и удаления контейнера
    таким образом мы можем сохранять, изменять и удалять данные и использовать их в контейнере, не боясь что мы их потеряем при обновлении версии image